const assert = require('assert');
const fs = require('fs');
const path = require('path');

describe('CalDAV Node Structure Tests', function() {
    
    describe('Compiled Files', function() {
        it('should have compiled node file', function() {
            const nodePath = path.join(__dirname, '..', 'dist', 'nodes', 'Caldav', 'Caldav.node.js');
            assert.ok(fs.existsSync(nodePath), 'Compiled node file should exist');
            console.log('‚úì Compiled node file exists at:', nodePath);
        });
        
        it('should have compiled credentials file', function() {
            const credentialsPath = path.join(__dirname, '..', 'dist', 'credentials', 'CaldavApi.credentials.js');
            assert.ok(fs.existsSync(credentialsPath), 'Compiled credentials file should exist');
            console.log('‚úì Compiled credentials file exists at:', credentialsPath);
        });
        
        it('should have icon file', function() {
            const iconPath = path.join(__dirname, '..', 'dist', 'nodes', 'Caldav', 'caldav.svg');
            assert.ok(fs.existsSync(iconPath), 'Icon file should exist');
            console.log('‚úì Icon file exists at:', iconPath);
        });
    });
    
    describe('Package Configuration', function() {
        it('should have correct package.json configuration', function() {
            const packagePath = path.join(__dirname, '..', 'package.json');
            const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            assert.strictEqual(packageJson.name, 'n8n-caldav-node', 'Package name should be correct');
            assert.ok(packageJson.n8n, 'Should have n8n configuration');
            assert.ok(packageJson.n8n.nodes, 'Should have nodes configuration');
            assert.ok(packageJson.n8n.credentials, 'Should have credentials configuration');
            
            console.log('‚úì Package configuration validated');
            console.log('  - Name:', packageJson.name);
            console.log('  - Version:', packageJson.version);
            console.log('  - Nodes:', packageJson.n8n.nodes.length);
            console.log('  - Credentials:', packageJson.n8n.credentials.length);
        });
        
        it('should have test script configured', function() {
            const packagePath = path.join(__dirname, '..', 'package.json');
            const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
            
            assert.ok(packageJson.scripts.test, 'Should have test script');
            assert.strictEqual(packageJson.scripts.test, 'mocha test/*.js', 'Test script should be correct');
            
            console.log('‚úì Test script configured correctly');
        });
    });
    
    describe('Node Dependencies', function() {
        it('should load required dependencies', function() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            try {
                require('dav');
                console.log('‚úì DAV library loaded successfully');
                assert.ok(true, 'DAV dependency loaded');
            } catch (error) {
                assert.fail('DAV dependency should be available: ' + error.message);
            }
        });
        
        it('should have correct peer dependencies', function() {
            const packagePath = path.join(__dirname, '..', 'package.json');
            const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
            
            assert.ok(packageJson.peerDependencies, 'Should have peer dependencies');
            assert.ok(packageJson.peerDependencies['n8n-workflow'], 'Should have n8n-workflow peer dependency');
            
            console.log('‚úì Peer dependencies configured correctly');
        });
    });
    
    describe('Type Definitions', function() {
        it('should have typescript definitions available', function() {
            const typesPath = path.join(__dirname, '..', 'types', 'dav.d.ts');
            assert.ok(fs.existsSync(typesPath), 'TypeScript definitions should exist');
            console.log('‚úì TypeScript definitions available');
        });
        
        it('should have compiled without typescript errors', function() {
            // –ï—Å–ª–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∑–Ω–∞—á–∏—Ç TypeScript –æ—à–∏–±–æ–∫ –Ω–µ—Ç
            const distPath = path.join(__dirname, '..', 'dist');
            assert.ok(fs.existsSync(distPath), 'Dist directory should exist after successful compilation');
            console.log('‚úì TypeScript compilation successful');
        });
    });
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
function logNodeInfo() {
    console.log('\n=== CalDAV Node Structure Summary ===');
    console.log('üì¶ –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
    console.log('   ‚úÖ dist/nodes/Caldav/Caldav.node.js');
    console.log('   ‚úÖ dist/credentials/CaldavApi.credentials.js');
    console.log('   ‚úÖ dist/nodes/Caldav/caldav.svg');
    console.log('');
    console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    console.log('   ‚úÖ package.json —Å n8n —Å–µ–∫—Ü–∏–µ–π');
    console.log('   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    console.log('   ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    console.log('');
    console.log('üîß TypeScript:');
    console.log('   ‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫');
    console.log('   ‚úÖ –¢–∏–ø—ã DAV –±–∏–±–ª–∏–æ—Ç–µ–∫–∏');
    console.log('');
    console.log('üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ n8n!');
    console.log('======================================\n');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
logNodeInfo(); 